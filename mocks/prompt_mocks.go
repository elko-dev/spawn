// Code generated by MockGen. DO NOT EDIT.
// Source: prompt/selections.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// ProjectName mocks base method
func (m *MockCommand) ProjectName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectName indicates an expected call of ProjectName
func (mr *MockCommandMockRecorder) ProjectName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectName", reflect.TypeOf((*MockCommand)(nil).ProjectName))
}

// ApplicationType mocks base method
func (m *MockCommand) ApplicationType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationType indicates an expected call of ApplicationType
func (mr *MockCommandMockRecorder) ApplicationType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationType", reflect.TypeOf((*MockCommand)(nil).ApplicationType))
}

// ServerType mocks base method
func (m *MockCommand) ServerType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerType indicates an expected call of ServerType
func (mr *MockCommandMockRecorder) ServerType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerType", reflect.TypeOf((*MockCommand)(nil).ServerType))
}

// ClientLanguageType mocks base method
func (m *MockCommand) ClientLanguageType(applicationType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientLanguageType", applicationType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientLanguageType indicates an expected call of ClientLanguageType
func (mr *MockCommandMockRecorder) ClientLanguageType(applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientLanguageType", reflect.TypeOf((*MockCommand)(nil).ClientLanguageType), applicationType)
}

// Platform mocks base method
func (m *MockCommand) Platform() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Platform")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Platform indicates an expected call of Platform
func (mr *MockCommandMockRecorder) Platform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Platform", reflect.TypeOf((*MockCommand)(nil).Platform))
}
