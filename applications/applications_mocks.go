// Code generated by MockGen. DO NOT EDIT.
// Source: applications/applications.go

// Package applications is a generated GoMock package.
package applications

import (
	api "github.com/elko-dev/spawn/git/api"
	platform "github.com/elko-dev/spawn/platform"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFactory) Create() (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFactory)(nil).Create))
}

// MockProject is a mock of Project interface
type MockProject struct {
	ctrl     *gomock.Controller
	recorder *MockProjectMockRecorder
}

// MockProjectMockRecorder is the mock recorder for MockProject
type MockProjectMockRecorder struct {
	mock *MockProject
}

// NewMockProject creates a new mock instance
func NewMockProject(ctrl *gomock.Controller) *MockProject {
	mock := &MockProject{ctrl: ctrl}
	mock.recorder = &MockProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProject) EXPECT() *MockProjectMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProject) Create() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProjectMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProject)(nil).Create))
}

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockApp) Create(application platform.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", application)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAppMockRecorder) Create(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApp)(nil).Create), application)
}

// MockGitRepository is a mock of GitRepository interface
type MockGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryMockRecorder
}

// MockGitRepositoryMockRecorder is the mock recorder for MockGitRepository
type MockGitRepositoryMockRecorder struct {
	mock *MockGitRepository
}

// NewMockGitRepository creates a new mock instance
func NewMockGitRepository(ctrl *gomock.Controller) *MockGitRepository {
	mock := &MockGitRepository{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitRepository) EXPECT() *MockGitRepositoryMockRecorder {
	return m.recorder
}

// CreateGitRepository mocks base method
func (m *MockGitRepository) CreateGitRepository(repositoryName, gitToken, platformToken, url string) (api.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepository", repositoryName, gitToken, platformToken, url)
	ret0, _ := ret[0].(api.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepository indicates an expected call of CreateGitRepository
func (mr *MockGitRepositoryMockRecorder) CreateGitRepository(repositoryName, gitToken, platformToken, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepository", reflect.TypeOf((*MockGitRepository)(nil).CreateGitRepository), repositoryName, gitToken, platformToken, url)
}

// MockPlatformRepository is a mock of PlatformRepository interface
type MockPlatformRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformRepositoryMockRecorder
}

// MockPlatformRepositoryMockRecorder is the mock recorder for MockPlatformRepository
type MockPlatformRepositoryMockRecorder struct {
	mock *MockPlatformRepository
}

// NewMockPlatformRepository creates a new mock instance
func NewMockPlatformRepository(ctrl *gomock.Controller) *MockPlatformRepository {
	mock := &MockPlatformRepository{ctrl: ctrl}
	mock.recorder = &MockPlatformRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlatformRepository) EXPECT() *MockPlatformRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPlatformRepository) Create(application platform.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", application)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPlatformRepositoryMockRecorder) Create(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlatformRepository)(nil).Create), application)
}

// MockPlatformFactory is a mock of PlatformFactory interface
type MockPlatformFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformFactoryMockRecorder
}

// MockPlatformFactoryMockRecorder is the mock recorder for MockPlatformFactory
type MockPlatformFactoryMockRecorder struct {
	mock *MockPlatformFactory
}

// NewMockPlatformFactory creates a new mock instance
func NewMockPlatformFactory(ctrl *gomock.Controller) *MockPlatformFactory {
	mock := &MockPlatformFactory{ctrl: ctrl}
	mock.recorder = &MockPlatformFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlatformFactory) EXPECT() *MockPlatformFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPlatformFactory) Create(projectName string) (PlatformRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectName)
	ret0, _ := ret[0].(PlatformRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPlatformFactoryMockRecorder) Create(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlatformFactory)(nil).Create), projectName)
}

// MockGitFactory is a mock of GitFactory interface
type MockGitFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGitFactoryMockRecorder
}

// MockGitFactoryMockRecorder is the mock recorder for MockGitFactory
type MockGitFactoryMockRecorder struct {
	mock *MockGitFactory
}

// NewMockGitFactory creates a new mock instance
func NewMockGitFactory(ctrl *gomock.Controller) *MockGitFactory {
	mock := &MockGitFactory{ctrl: ctrl}
	mock.recorder = &MockGitFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitFactory) EXPECT() *MockGitFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockGitFactory) Create(projectName string) (GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectName)
	ret0, _ := ret[0].(GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockGitFactoryMockRecorder) Create(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGitFactory)(nil).Create), projectName)
}
