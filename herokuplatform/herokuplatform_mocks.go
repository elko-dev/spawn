// Code generated by MockGen. DO NOT EDIT.
// Source: herokuplatform/factory.go

// Package herokuplatform is a generated GoMock package.
package herokuplatform

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// forEnvironments mocks base method
func (m *MockPrompt) forEnvironments() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forEnvironments")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forEnvironments indicates an expected call of forEnvironments
func (mr *MockPromptMockRecorder) forEnvironments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forEnvironments", reflect.TypeOf((*MockPrompt)(nil).forEnvironments))
}

// forHerokuTeamName mocks base method
func (m *MockPrompt) forHerokuTeamName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forHerokuTeamName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forHerokuTeamName indicates an expected call of forHerokuTeamName
func (mr *MockPromptMockRecorder) forHerokuTeamName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forHerokuTeamName", reflect.TypeOf((*MockPrompt)(nil).forHerokuTeamName))
}

// forPlatformToken mocks base method
func (m *MockPrompt) forPlatformToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forPlatformToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forPlatformToken indicates an expected call of forPlatformToken
func (mr *MockPromptMockRecorder) forPlatformToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forPlatformToken", reflect.TypeOf((*MockPrompt)(nil).forPlatformToken))
}

// forAuthSecretPath mocks base method
func (m *MockPrompt) forAuthSecretPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forAuthSecretPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forAuthSecretPath indicates an expected call of forAuthSecretPath
func (mr *MockPromptMockRecorder) forAuthSecretPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forAuthSecretPath", reflect.TypeOf((*MockPrompt)(nil).forAuthSecretPath))
}
