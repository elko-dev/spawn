// Code generated by MockGen. DO NOT EDIT.
// Source: platform/factory.go

// Package platform is a generated GoMock package.
package platform

import (
	applications "github.com/elko-dev/spawn/applications"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSecrets is a mock of Secrets interface
type MockSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsMockRecorder
}

// MockSecretsMockRecorder is the mock recorder for MockSecrets
type MockSecretsMockRecorder struct {
	mock *MockSecrets
}

// NewMockSecrets creates a new mock instance
func NewMockSecrets(ctrl *gomock.Controller) *MockSecrets {
	mock := &MockSecrets{ctrl: ctrl}
	mock.recorder = &MockSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecrets) EXPECT() *MockSecretsMockRecorder {
	return m.recorder
}

// AsBase64String mocks base method
func (m *MockSecrets) AsBase64String(fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsBase64String", fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsBase64String indicates an expected call of AsBase64String
func (mr *MockSecretsMockRecorder) AsBase64String(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsBase64String", reflect.TypeOf((*MockSecrets)(nil).AsBase64String), fileName)
}

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// forPlatformType mocks base method
func (m *MockPrompt) forPlatformType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forPlatformType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forPlatformType indicates an expected call of forPlatformType
func (mr *MockPromptMockRecorder) forPlatformType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forPlatformType", reflect.TypeOf((*MockPrompt)(nil).forPlatformType))
}

// MockHerokuPlatformFactory is a mock of HerokuPlatformFactory interface
type MockHerokuPlatformFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHerokuPlatformFactoryMockRecorder
}

// MockHerokuPlatformFactoryMockRecorder is the mock recorder for MockHerokuPlatformFactory
type MockHerokuPlatformFactoryMockRecorder struct {
	mock *MockHerokuPlatformFactory
}

// NewMockHerokuPlatformFactory creates a new mock instance
func NewMockHerokuPlatformFactory(ctrl *gomock.Controller) *MockHerokuPlatformFactory {
	mock := &MockHerokuPlatformFactory{ctrl: ctrl}
	mock.recorder = &MockHerokuPlatformFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHerokuPlatformFactory) EXPECT() *MockHerokuPlatformFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHerokuPlatformFactory) Create(projectName, applicationType string) (applications.PlatformRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectName, applicationType)
	ret0, _ := ret[0].(applications.PlatformRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockHerokuPlatformFactoryMockRecorder) Create(projectName, applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHerokuPlatformFactory)(nil).Create), projectName, applicationType)
}

// MockFunctionsPlatformFactory is a mock of FunctionsPlatformFactory interface
type MockFunctionsPlatformFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionsPlatformFactoryMockRecorder
}

// MockFunctionsPlatformFactoryMockRecorder is the mock recorder for MockFunctionsPlatformFactory
type MockFunctionsPlatformFactoryMockRecorder struct {
	mock *MockFunctionsPlatformFactory
}

// NewMockFunctionsPlatformFactory creates a new mock instance
func NewMockFunctionsPlatformFactory(ctrl *gomock.Controller) *MockFunctionsPlatformFactory {
	mock := &MockFunctionsPlatformFactory{ctrl: ctrl}
	mock.recorder = &MockFunctionsPlatformFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFunctionsPlatformFactory) EXPECT() *MockFunctionsPlatformFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFunctionsPlatformFactory) Create(projectName, applicationType string) (applications.PlatformRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectName, applicationType)
	ret0, _ := ret[0].(applications.PlatformRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFunctionsPlatformFactoryMockRecorder) Create(projectName, applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFunctionsPlatformFactory)(nil).Create), projectName, applicationType)
}
