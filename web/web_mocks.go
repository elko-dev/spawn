// Code generated by MockGen. DO NOT EDIT.
// Source: web/factory.go

// Package web is a generated GoMock package.
package web

import (
	applications "github.com/elko-dev/spawn/applications"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientAppFactory is a mock of ClientAppFactory interface
type MockClientAppFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientAppFactoryMockRecorder
}

// MockClientAppFactoryMockRecorder is the mock recorder for MockClientAppFactory
type MockClientAppFactoryMockRecorder struct {
	mock *MockClientAppFactory
}

// NewMockClientAppFactory creates a new mock instance
func NewMockClientAppFactory(ctrl *gomock.Controller) *MockClientAppFactory {
	mock := &MockClientAppFactory{ctrl: ctrl}
	mock.recorder = &MockClientAppFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientAppFactory) EXPECT() *MockClientAppFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClientAppFactory) Create(applicationType string) (applications.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", applicationType)
	ret0, _ := ret[0].(applications.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClientAppFactoryMockRecorder) Create(applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientAppFactory)(nil).Create), applicationType)
}

// MockServerAppFactory is a mock of ServerAppFactory interface
type MockServerAppFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerAppFactoryMockRecorder
}

// MockServerAppFactoryMockRecorder is the mock recorder for MockServerAppFactory
type MockServerAppFactoryMockRecorder struct {
	mock *MockServerAppFactory
}

// NewMockServerAppFactory creates a new mock instance
func NewMockServerAppFactory(ctrl *gomock.Controller) *MockServerAppFactory {
	mock := &MockServerAppFactory{ctrl: ctrl}
	mock.recorder = &MockServerAppFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerAppFactory) EXPECT() *MockServerAppFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockServerAppFactory) Create(applicationType string) (applications.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", applicationType)
	ret0, _ := ret[0].(applications.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServerAppFactoryMockRecorder) Create(applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerAppFactory)(nil).Create), applicationType)
}

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// ForClientType mocks base method
func (m *MockPrompt) ForClientType(applicationType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForClientType", applicationType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForClientType indicates an expected call of ForClientType
func (mr *MockPromptMockRecorder) ForClientType(applicationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForClientType", reflect.TypeOf((*MockPrompt)(nil).ForClientType), applicationType)
}

// ForServerType mocks base method
func (m *MockPrompt) ForServerType() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForServerType")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForServerType indicates an expected call of ForServerType
func (mr *MockPromptMockRecorder) ForServerType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForServerType", reflect.TypeOf((*MockPrompt)(nil).ForServerType))
}

// IncludeBackend mocks base method
func (m *MockPrompt) IncludeBackend() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncludeBackend")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncludeBackend indicates an expected call of IncludeBackend
func (mr *MockPromptMockRecorder) IncludeBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncludeBackend", reflect.TypeOf((*MockPrompt)(nil).IncludeBackend))
}
