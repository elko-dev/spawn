// Code generated by MockGen. DO NOT EDIT.
// Source: nodejs/factory.go

// Package nodejs is a generated GoMock package.
package nodejs

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// forAppName mocks base method
func (m *MockPrompt) forAppName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forAppName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forAppName indicates an expected call of forAppName
func (mr *MockPromptMockRecorder) forAppName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forAppName", reflect.TypeOf((*MockPrompt)(nil).forAppName))
}

// forVersionControl mocks base method
func (m *MockPrompt) forVersionControl() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forVersionControl")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forVersionControl indicates an expected call of forVersionControl
func (mr *MockPromptMockRecorder) forVersionControl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forVersionControl", reflect.TypeOf((*MockPrompt)(nil).forVersionControl))
}

// forFramework mocks base method
func (m *MockPrompt) forFramework() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forFramework")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// forFramework indicates an expected call of forFramework
func (mr *MockPromptMockRecorder) forFramework() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forFramework", reflect.TypeOf((*MockPrompt)(nil).forFramework))
}
